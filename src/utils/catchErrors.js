/**
 * Обгортає асинхронну функцію-контролер для обробки помилок.
 * 
 * Ця утиліта використовується для обгортання асинхронних обробників маршрутів або контролерів,
 * щоб автоматично перехоплювати помилки, які можуть виникнути під час їх виконання,
 * і передавати ці помилки наступному проміжному програмному забезпеченню в ланцюжку Express.js.
 * 
 * @function catchErrors
 * @param {Function} controller - Асинхронна функція-контролер, яка обробляє маршрут.
 *    Вона отримує стандартні параметри Express.js: req, res і next.
 * @returns {Function} - Нова функція-проміжне програмне забезпечення, яка обгортає оригінальний контролер,
 *    перехоплюючи помилки і передаючи їх через функцію `next`.
 * 
 * Приклад використання:
 * 
 * import catchErrors from './catchErrors';
 * 
 * app.get('/route', catchErrors(async (req, res) => {
 *     // Ваш асинхронний код
 *     res.json({ success: true });
 * }));
 */
function catchErrors(controller) {
    return async (req, res, next) => {
        try {
            // Викликає оригінальну функцію-контролер і очікує її виконання.
            await controller(req, res, next);
        } catch (error) {
            // Якщо виникла помилка, передає її до наступного проміжного програмного забезпечення (зазвичай обробника помилок).
            next(error);
        }
    };
}

export default catchErrors;
